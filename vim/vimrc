"necessary on some Linux distros for pathogen to properly load bundles
filetype off
set encoding=UTF-8
"load pathogen managed plugins
call pathogen#runtime_append_all_bundles()

"Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

let mapleader=" "

set shell=/bin/bash
"store lots of :cmdline history
set history=1000

set showcmd     "show incomplete cmds down the bottom
set showmode    "show current mode down the bottom

set incsearch   "find the next match as we type the search
set hlsearch    "hilight searches by default
set ignorecase smartcase
set laststatus=2

set hidden
set nobackup
set nowritebackup
set noswapfile

set number      "add line numbers
set showbreak=...
"set wrap linebreak nolist
set nowrap
set nolist
set lazyredraw
set ttyfast
set re=1
set synmaxcol=200

set ffs=unix

set autoread

nmap j gj
nmap k gk
nmap <C-e> :e#<CR>
nmap <C-n> :bnext<CR>

" Yank till the end of line
nnoremap Y y$
" Paste to line below
nmap P :pu!<CR>

"Telescope mappings
nmap <c-p> :Telescope find_files<cr>
nmap <c-b> :Telescope buffers<cr>
nmap <c-t> :Telescope colorscheme<cr>
nmap <C-\> :Telescope treesitter<cr>
nnoremap <leader>fg <cmd>Telescope git_files<cr>
nnoremap <leader>fl <cmd>Telescope live_grep<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

nnoremap <leader>g <cmd>Telescope git_commits<CR>
nnoremap <leader>c <cmd>Telescope git_bcommits<CR>
nmap <leader>ff :Telescope grep_string<CR>
nnoremap <leader>b :Twiggy<CR>

set completeopt=menuone,noselect

set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__

"remove trailing whitespace before save
function! StripTrailingWhite()
  let l = line(".")
  let c = col(".")
  let _s=@/
  %s/\s\+$//e
  call cursor(l, c)
  let @/=_s
endfun

autocmd BufWritePre *.{rb,coffee,js,haml,erb,python} call StripTrailingWhite()

" search word under cursor

nmap <leader>d :DockerToolsToggle<CR>

let g:gitgutter_enabled = 1

let g:tmux_navigator_no_mappings = 1
nmap <silent> <c-h> :TmuxNavigateLeft<cr>
nmap <silent> <c-j> :TmuxNavigateDown<cr>
nmap <silent> <c-k> :TmuxNavigateUp<cr>
nmap <silent> <c-l> :TmuxNavigateRight<cr>
"nmap <silent> <c-\> :TmuxNavigatePrevious<cr>

map <leader>t :NERDTreeToggle<CR>

" Ubuntu:
set clipboard=unnamedplus
" Mac:
" set clipboard+=unnamed

let g:jsx_ext_required = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "passive_filetypes": ["haml", "scss", "sass"] }

let g:flow#autoclose = 1

function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

augroup FiletypeGroup
    autocmd!
    " .ts is a Typescript file
    au BufNewFile,BufRead *.ts set filetype=typescript
augroup END
" prettier
" "autocmd FileType javascript set formatprg=prettier\ --stdin
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md PrettierAsync

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

Plug 'kevinhui/vim-docker-tools'
Plug 'mhinz/vim-mix-format'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'roxma/vim-tmux-clipboard'
Plug 'machakann/vim-highlightedyank'
Plug 'sodapopcan/vim-twiggy'

" Typescript syntax
Plug 'jparise/vim-graphql'        " GraphQL syntax
Plug 'rafi/awesome-vim-colorschemes'

" neovim 0.5 goodies, see https://github.com/ray-x/navigator.lua
Plug 'neovim/nvim-lspconfig'
Plug 'ray-x/guihua.lua', {'do': 'cd lua/fzy && make' }
Plug 'ray-x/navigator.lua'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'ray-x/lsp_signature.nvim'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
call plug#end()

lua <<EOF
  require'navigator'.setup()

  require'nvim-treesitter.configs'.setup {
    ensure_installed = "maintained",
    highlight = {
      enable = true
    },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = "gnn",
        node_incremental = "grn",
        scope_incremental = "grc",
        node_decremental = "grm",
      },
    },
  }

  local nvim_lsp = require("lspconfig")
  local lsp_signature = require('lsp_signature')

  local format_async = function(err, _, result, _, bufnr)
      if err ~= nil or result == nil then return end
      if not vim.api.nvim_buf_get_option(bufnr, "modified") then
          local view = vim.fn.winsaveview()
          vim.lsp.util.apply_text_edits(result, bufnr)
          vim.fn.winrestview(view)
          if bufnr == vim.api.nvim_get_current_buf() then
              vim.api.nvim_command("noautocmd :update")
          end
      end
  end

  vim.lsp.handlers["textDocument/formatting"] = format_async
  _G.lsp_organize_imports = function()
      local params = {
          command = "_typescript.organizeImports",
          arguments = {vim.api.nvim_buf_get_name(0)},
          title = ""
      }
      vim.lsp.buf.execute_command(params)
  end

  local on_attach = function(client, bufnr)

  local buf_map = vim.api.nvim_buf_set_keymap
  vim.cmd("command! LspDef lua vim.lsp.buf.definition()")
  vim.cmd("command! LspFormatting lua vim.lsp.buf.formatting()")
  vim.cmd("command! LspCodeAction lua vim.lsp.buf.code_action()")
  vim.cmd("command! LspHover lua vim.lsp.buf.hover()")
  vim.cmd("command! LspRename lua vim.lsp.buf.rename()")
  vim.cmd("command! LspOrganize lua lsp_organize_imports()")
  vim.cmd("command! LspRefs lua vim.lsp.buf.references()")
  vim.cmd("command! LspTypeDef lua vim.lsp.buf.type_definition()")
  vim.cmd("command! LspImplementation lua vim.lsp.buf.implementation()")
  vim.cmd("command! LspDiagPrev lua vim.lsp.diagnostic.goto_prev()")
  vim.cmd("command! LspDiagNext lua vim.lsp.diagnostic.goto_next()")
  vim.cmd(
      "command! LspDiagLine lua vim.lsp.diagnostic.show_line_diagnostics()")
  vim.cmd("command! LspSignatureHelp lua vim.lsp.buf.signature_help()")

  buf_map(bufnr, "n", "gd", ":LspDef<CR>", {silent = true})
  buf_map(bufnr, "n", "gr", ":LspRename<CR>", {silent = true})
  buf_map(bufnr, "n", "gR", ":LspRefs<CR>", {silent = true})
  buf_map(bufnr, "n", "gy", ":LspTypeDef<CR>", {silent = true})
  buf_map(bufnr, "n", "K", ":LspHover<CR>", {silent = true})
  buf_map(bufnr, "n", "gs", ":LspOrganize<CR>", {silent = true})
  buf_map(bufnr, "n", "[a", ":LspDiagPrev<CR>", {silent = true})
  buf_map(bufnr, "n", "]a", ":LspDiagNext<CR>", {silent = true})
  buf_map(bufnr, "n", "ga", ":LspCodeAction<CR>", {silent = true})
  buf_map(bufnr, "n", "<Leader>a", ":LspDiagLine<CR>", {silent = true})
  buf_map(bufnr, "i", "<C-x><C-x>", "<cmd> LspSignatureHelp<CR>", {silent = true})

  if client.resolved_capabilities.document_formatting then
          vim.api.nvim_exec([[
           augroup LspAutocommands
               autocmd! * <buffer>
               autocmd BufWritePost <buffer> LspFormatting
           augroup END
           ]], true)
      end
  end

  nvim_lsp.tsserver.setup {
      on_attach = function(client)
          client.resolved_capabilities.document_formatting = false
          signature_config = {
            bind = true,
            doc_lines = 4,
            handler_opts = {
              border = "single"
              }
            }
          lsp_signature.on_attach(signature_config)
          on_attach(client)
      end
  }
  local filetypes = {
      typescript = "eslint",
      typescriptreact = "eslint",
  }

  local linters = {
      eslint = {
          sourceName = "eslint",
          command = "eslint_d",
          rootPatterns = {".eslintrc.js", "package.json"},
          debounce = 100,
          args = {"--stdin", "--stdin-filename", "%filepath", "--format", "json"},
          parseJson = {
              errorsRoot = "[0].messages",
              line = "line",
              column = "column",
              endLine = "endLine",
              endColumn = "endColumn",
              message = "${message} [${ruleId}]",
              security = "severity"
          },
          securities = {[2] = "error", [1] = "warning"}
      }
  }

  local formatters = {
      prettier = {command = "prettier", args = {"--stdin-filepath", "%filepath"}}
  }

  local formatFiletypes = {
      typescript = "prettier",
      typescriptreact = "prettier"
  }

  local actions = require('telescope.actions')

  require('telescope').setup{
    defaults = {
      sorting_strategy = "ascending",
      set_env = { ['COLORTERM'] = 'truecolor' },
      mappings = {
        i = {
          ["<C-[>"] = actions.close
        },
        n = {
          ["<C-[>"] = actions.close
        },
      },
    },
    extensions = {
      fzy_native = {
        override_generic_sorter = false,
        override_file_sorter = true,
      }
    }
  }

  require('telescope').load_extension('fzy_native')
EOF

set noerrorbells

"indent settings
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

set path=.,src
set suffixesadd=.js,.jsx,.tsx,.ts,.less,.css

set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default
filetype plugin on
filetype indent on

function! LoadMainNodeModule(fname)
    let nodeModules = "./node_modules/"
    let packageJsonPath = nodeModules . a:fname . "/package.json"

    if filereadable(packageJsonPath)
        return nodeModules . a:fname . "/" . json_decode(join(readfile(packageJsonPath))).main
    else
        return nodeModules . a:fname
    endif
endfunction

set includeexpr=LoadMainNodeModule(v:fname)

let g:deoplete#enable_at_startup = 1

" deoplete tab mapping
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

let g:mix_format_on_save = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPEN FILES IN DIRECTORY OF CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN TEST AND PRODUCTION CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<policies\>') != -1 || match(current_file, '\<services\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction
nnoremap <leader>. :call OpenTestAlternate()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'))
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

" vim-airline settings
let g:airline_powerline_fonts=1
let g:lightline = { 'colorscheme': 'solarized8' }
set ttimeoutlen=50

"key mapping for saving file
nmap <C-s> :w<CR>

" Clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLORS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
colorscheme solarized8
if ($THEME ==? "light")
  set background=light
else
  colorscheme atom
  set background=dark
endif
